{"version":3,"sources":["../src/query_ctrl.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAQ;;;;;;;;;;;;;;;;;;;;;AAGF,4BAAgB,qKAMpB,IANoB;;kDAQT;;;AACT,yBADS,0BACT,CAAY,MAAZ,EAAoB,SAApB,EAA+B,YAA/B,EAA8C;0CADrC,4BACqC;;uFADrC,uCAEC,QAAQ,YAD4B;;AAE1C,0BAAK,MAAL,CAAY,MAAZ,GAAqB,MAAK,MAAL,CAAY,MAAZ,IAAsB,aAAtB,CAFqB;AAG1C,0BAAK,YAAL,GAAoB,YAApB,CAH0C;AAI1C,0BAAK,mBAAL,GAA2B,aAAa,eAAb,EAA3B,CAJ0C;AAK1C,0BAAK,kBAAL,GAA0B,aAAa,iBAAb,EAA1B,CAL0C;;iBAA9C;;6BADS;;8CASC;AACN,6BAAK,SAAL,CAAe,OAAf,GADM;;;;iDAIG;;;AACT,+BAAO,KAAK,UAAL,CAAgB,YAAhB,GAA+B,IAA/B,CAAoC,eAAO;AAC9C,mCAAO,IAAI,GAAJ,CAAQ;uCAAK,OAAK,YAAL,CAAkB,UAAlB,CAA6B;AAC7C,2CAAO,CAAP;AACA,gDAAY,KAAZ;iCAFgB;6BAAL,CAAf,CAD8C;yBAAP,CAA3C,CADS;;;;sDASK;;;AACd,4BAAI,SAAS,KAAK,mBAAL,CAAyB,KAAzB,CADC;AAEd,+BAAO,KAAK,UAAL,CAAgB,gBAAhB,CAAiC,MAAjC,EAAyC,IAAzC,CAA8C,eAAO;AACxD,mCAAO,IAAI,GAAJ,CAAQ;uCAAK,OAAK,YAAL,CAAkB,UAAlB,CAA6B;AAC7C,2CAAO,CAAP;AACA,gDAAY,KAAZ;iCAFgB;6BAAL,CAAf,CADwD;yBAAP,CAArD,CAFc;;;;uBAtBT;cAAmC;;;;AAiChD,uCAA2B,WAA3B,GAAyC,4BAAzC","file":"query_ctrl.js","sourcesContent":["import {QueryCtrl} from 'app/plugins/sdk';\nimport './css/query-editor.css!';\n\nconst DEFAULT_QUERY = `\nSELECT (ts - (ts % :interval)) AS TS, AVG(value) AS Value, metric AS Segment\nFROM analytics\nWHERE\n    ts >= :from AND ts <= :to AND metric = \"\"\nGROUP BY 1\n`.trim();\n\nexport class GenericDatasourceQueryCtrl extends QueryCtrl {\n    constructor($scope, $injector, uiSegmentSrv)  {\n        super($scope, $injector);\n        this.target.target = this.target.target || DEFAULT_QUERY;\n        this.uiSegmentSrv = uiSegmentSrv;\n        this.metricSearchSegment = uiSegmentSrv.newSelectMetric();\n        this.metricValueSegment = uiSegmentSrv.newSelectTagValue();\n    }\n\n    refresh() {\n        this.panelCtrl.refresh();\n    }\n\n    getMetrics() {\n        return this.datasource.metricsQuery().then(res => {\n            return res.map(c => this.uiSegmentSrv.newSegment({\n                value: c,\n                expandable: false,\n            }));\n        });\n    }\n\n    getMetricValues() {\n        var metric = this.metricSearchSegment.value;\n        return this.datasource.metricValueQuery(metric).then(res => {\n            return res.map(c => this.uiSegmentSrv.newSegment({\n                value: c,\n                expandable: false,\n            }));\n        });\n    }\n}\n\nGenericDatasourceQueryCtrl.templateUrl = 'partials/query.editor.html';\n"]}