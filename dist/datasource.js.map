{"version":3,"sources":["../src/datasource.js"],"names":[],"mappings":"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","file":"datasource.js","sourcesContent":["import {parseInterval} from \"./util\";\nimport _ from \"lodash\";\nimport moment from \"moment\";\n\n// taken from grafana source\n// attempt at sanitizing user defined values\nfunction luceneEscape(value) {\n    return value.replace(/([\\!\\*\\+\\-\\=<>\\s\\&\\|\\(\\)\\[\\]\\{\\}\\^\\~\\?\\:\\\\/\"])/g, \"\\\\$1\");\n}\n\nexport class GenericDatasource {\n    constructor(instanceSettings, $q, backendSrv, templateSrv) {\n        this.type = instanceSettings.type;\n        this.url = instanceSettings.url;\n        this.name = instanceSettings.name;\n        this.q = $q;\n        this.backendSrv = backendSrv;\n        this.templateSrv = templateSrv;\n    }\n\n    // Used for testing datasource in datasource configuration pange\n    testDatasource() {\n        return this.backendSrv.datasourceRequest({\n            url: this.url + '/grafana/',\n            method: 'GET'\n        }).then(\n            response => {\n                if (response.status === 200) {\n                    var data = response.data;\n                    if (data && data.service === \"Memlytics Grafana\") {\n                        return {\n                            status: \"success\",\n                            title: \"Success\",\n                            message: \"Connected to MemSQL analytics proxy.\",\n                        };\n                    }\n                }\n\n                return {\n                    status: \"error\",\n                    title: \"Connection failed\",\n                    message: \"Failed to find MemSQL analytics proxy at the provided url.\",\n                };\n            },\n            () => ({\n                status: \"error\",\n                title: \"Connection failed\",\n                message: \"Could not connect to a MemSQL analytics proxy at the provided url.\",\n            })\n        );\n    }\n\n    query(options) {\n        console.debug(options);\n        var queries = _(options.targets)\n            .filter(t => !t.hide && t.target)\n            .map(t => ({\n                alias: t.alias || t.refId,\n                sql: this.templateSrv.replace(t.target, t.scopedVars, this.formatValue.bind(this)),\n            }))\n            .value();\n\n        if (queries.length === 0) {\n            return this.q.when({ data: [] });\n        }\n\n        return this.backendSrv.datasourceRequest({\n            url: this.url + '/grafana/query/',\n            data: {\n                queries: queries,\n                timeWindow: {\n                    // convert timestamps to milliseconds since epoch\n                    from: options.range.from.valueOf(),\n                    to: options.range.to.valueOf(),\n                    interval: parseInterval(options.interval)\n                }\n            },\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' }\n        });\n    }\n\n    annotationQuery(options) {\n        console.debug(options);\n        return this.backendSrv.datasourceRequest({\n            url: this.url + '/grafana/raw/',\n            data: {\n                query: options.annotation.query,\n                args: {\n                    from: options.range.from.utc().format(),\n                    to: options.range.to.utc().format()\n                },\n                columnTypes: [ \"time\", \"string\", \"string\", \"string\" ]\n            },\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' }\n        }).then(result => {\n            return _.map(result.data, d => ({\n                annotation: options.annotation,\n                time: moment.utc(d[0]).valueOf(),\n                title: d[1],\n                tags: d.length >= 2 ? d[2] : \"\",\n                text: d.length >= 3 ? d[3] : \"\",\n            }));\n        });\n    }\n\n    metricFindQuery(query) {\n        return this.backendSrv.datasourceRequest({\n            url: this.url + '/grafana/raw/',\n            data: {\n                query,\n                columnTypes: [ \"string\" ]\n            },\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' }\n        }).then(result => {\n            return _.map(result.data, (d, i) => ({\n                text: d[0],\n                value: i\n            }));\n        });\n    }\n\n    metricsQuery() {\n        return this.backendSrv.datasourceRequest({\n            url: this.url + '/grafana/raw/',\n            data: {\n                query: `\n                    SELECT name\n                    FROM analytics_cache\n                    GROUP BY 1\n                    ORDER BY 1\n                `,\n                columnTypes: [ \"string\" ]\n            },\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' }\n        }).then(result => {\n            return _.map(result.data, d => d[0]);\n        });\n    }\n\n    metricValueQuery(metric) {\n        return this.backendSrv.datasourceRequest({\n            url: this.url + '/grafana/raw/',\n            data: {\n                query: `\n                    SELECT value\n                    FROM analytics_cache\n                    WHERE name = :name\n                    ORDER BY 1\n                `,\n                args: { name: metric },\n                columnTypes: [ \"string\" ]\n            },\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' }\n        }).then(result => {\n            return _.map(result.data, d => d[0]);\n        });\n    }\n\n    formatValue(value) {\n        if (typeof value === 'string') {\n            return `\"${luceneEscape(value)}\"`;\n        }\n\n        // serialize array to in-list\n        return \"(\" + _.map(value, this.formatValue).join(\",\") + \")\";\n    }\n}\n"]}