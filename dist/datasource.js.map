{"version":3,"sources":["../src/datasource.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;yCAAa;AACT,yBADS,iBACT,CAAY,gBAAZ,EAA8B,EAA9B,EAAkC,UAAlC,EAA8C;0CADrC,mBACqC;;AAC1C,yBAAK,IAAL,GAAY,iBAAiB,IAAjB,CAD8B;AAE1C,yBAAK,GAAL,GAAW,iBAAiB,GAAjB,CAF+B;AAG1C,yBAAK,IAAL,GAAY,iBAAiB,IAAjB,CAH8B;AAI1C,yBAAK,CAAL,GAAS,EAAT,CAJ0C;AAK1C,yBAAK,UAAL,GAAkB,UAAlB,CAL0C;iBAA9C;;;;;6BADS;;0CAUH,SAAS;AACX,gCAAQ,GAAR,CAAY,OAAZ,EADW;AAEX,4BAAI,QAAQ,KAAK,oBAAL,CAA0B,OAA1B,CAAR,CAFO;AAGX,gCAAQ,GAAR,CAAY,KAAZ,EAHW;;AAKX,4BAAI,MAAM,OAAN,CAAc,MAAd,IAAwB,CAAxB,EAA2B;AAC3B,mCAAO,KAAK,CAAL,CAAO,IAAP,CAAY,EAAZ,CAAP,CAD2B;yBAA/B;;AAIA,+BAAO,KAAK,UAAL,CAAgB,iBAAhB,CAAkC;AACrC,iCAAK,KAAK,GAAL,GAAW,QAAX;AACL,kCAAM,KAAN;AACA,oCAAQ,MAAR;AACA,qCAAS,EAAE,gBAAgB,kBAAhB,EAAX;yBAJG,CAAP,CATW;;;;qDAmBE;AACb,+BAAO,KAAK,UAAL,CAAgB,iBAAhB,CAAkC;AACrC,iCAAK,KAAK,GAAL,GAAW,GAAX;AACL,oCAAQ,KAAR;yBAFG,EAGJ,IAHI,CAGC,oBAAY;AAChB,gCAAI,SAAS,MAAT,KAAoB,GAApB,EAAyB;AACzB,uCAAO,EAAE,QAAQ,SAAR,EAAmB,SAAS,wBAAT,EAAmC,OAAO,SAAP,EAA/D,CADyB;6BAA7B;yBADI,CAHR,CADa;;;;oDAWD,SAAS;AACrB,+BAAO,KAAK,UAAL,CAAgB,iBAAhB,CAAkC;AACrC,iCAAK,KAAK,GAAL,GAAW,cAAX;AACL,oCAAQ,MAAR;AACA,kCAAM,OAAN;yBAHG,EAIJ,IAJI,CAIC,kBAAU;AACd,mCAAO,OAAO,IAAP,CADO;yBAAV,CAJR,CADqB;;;;oDAYT,SAAS;AACrB,+BAAO,KAAK,UAAL,CAAgB,iBAAhB,CAAkC;AACrC,iCAAK,KAAK,GAAL,GAAW,SAAX;AACL,kCAAM,OAAN;AACA,oCAAQ,MAAR;AACA,qCAAS,EAAE,gBAAgB,kBAAhB,EAAX;yBAJG,EAKJ,IALI,CAKC,KAAK,cAAL,CALR,CADqB;;;;mDASV,QAAQ;AACnB,+BAAO,EAAE,GAAF,CAAM,OAAO,IAAP,EAAa,UAAC,CAAD,EAAI,CAAJ,EAAU;AAChC,mCAAO,EAAE,MAAM,CAAN,EAAS,OAAO,CAAP,EAAlB,CADgC;yBAAV,CAA1B,CADmB;;;;yDAMF,SAAS;;AAE1B,gCAAQ,OAAR,GAAkB,EAAE,MAAF,CAAS,QAAQ,OAAR,EAAiB,kBAAU;AAClD,mCAAO,OAAO,MAAP,KAAkB,eAAlB,CAD2C;yBAAV,CAA5C,CAF0B;;AAM1B,+BAAO,OAAP,CAN0B;;;;uBAnErB","file":"datasource.js","sourcesContent":["export class GenericDatasource {\n    constructor(instanceSettings, $q, backendSrv) {\n        this.type = instanceSettings.type;\n        this.url = instanceSettings.url;\n        this.name = instanceSettings.name;\n        this.q = $q;\n        this.backendSrv = backendSrv;\n    }\n\n    // Called once per panel (graph)\n    query(options) {\n        console.log(options);\n        var query = this.buildQueryParameters(options);\n        console.log(query);\n\n        if (query.targets.length <= 0) {\n            return this.q.when([]);\n        }\n\n        return this.backendSrv.datasourceRequest({\n            url: this.url + '/query',\n            data: query,\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' }\n        });\n    }\n\n    // Required\n    // Used for testing datasource in datasource configuration pange\n    testDatasource() {\n        return this.backendSrv.datasourceRequest({\n            url: this.url + '/',\n            method: 'GET'\n        }).then(response => {\n            if (response.status === 200) {\n                return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n            }\n        });\n    }\n\n    annotationQuery(options) {\n        return this.backendSrv.datasourceRequest({\n            url: this.url + '/annotations',\n            method: 'POST',\n            data: options\n        }).then(result => {\n            return result.data;\n        });\n    }\n\n    // Optional\n    // Required for templating\n    metricFindQuery(options) {\n        return this.backendSrv.datasourceRequest({\n            url: this.url + '/search',\n            data: options,\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' }\n        }).then(this.mapToTextValue);\n    }\n\n    mapToTextValue(result) {\n        return _.map(result.data, (d, i) => {\n            return { text: d, value: i};\n        });\n    }\n\n    buildQueryParameters(options) {\n        //remove placeholder targets\n        options.targets = _.filter(options.targets, target => {\n            return target.target !== 'select metric';\n        });\n\n        return options;\n    }\n}\n"]}